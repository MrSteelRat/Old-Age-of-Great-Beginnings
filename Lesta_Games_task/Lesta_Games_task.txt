Вопрос №1

На языке Python написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути. 
Объяснить плюсы и минусы обеих реализаций. 

Пример: 

def isEven(value):

      return value % 2 == 0
	  
Решение task #1: 
	  
# Python
def isEven(value):
    return (value >> 1) << 1 == value

// C/C++
bool isEven(int value) {
    return ((value >> 1) << 1) == value;
}

Плюс моей реализаций:

1. Эффективность с использованием сдвига.

2. Адаптированность.

Минусы реализаций:

1. Читаемость. 

2. Оптимизация компилятора.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Вопрос №2

На языке Python написать минимум по 2 класса реализовывающих циклический буфер FIFO. Объяснить плюсы и минусы каждой реализации.

Оценивается:

1. Полнота и качество реализации
2. Оформление кода
3. Наличие сравнения и пояснения по быстродействию

Решение task #2: Python

class RingBufferList:
    def __init__(self, size_max):
        self.max = size_max
        self.data = []

    def append(self, x):
        self.data.append(x)
        if len(self.data) == self.max:
            self.data = self.data[1:]

    def get(self):
        return self.data


class RingBufferDeque:
    from collections import deque

    def __init__(self, size_max):
        self.max = size_max
        self.data = deque(maxlen=size_max)

    def append(self, x):
        self.data.append(x)

    def get(self):
        return list(self.data)

Плюсы реализации RingBufferList:

1. Простая реализация с использованием списка
2. Легко понять и использовать 

Минусы реализации RingBufferList: 

1. Могут быть проблемы с производительностью для больших данных, из-за сдвига элементов

Плюсы реализации RingBufferDeque:

1. Использую collection.deque, который потокобезопасный, эффективен с точки зрения памяти добавления и извлечения сторон двухсторонней очереди.
С плюс-минус одинаковой производительность O(1) 

2. Лучшая производительность по сравнению с реализации на основе списка, касательно для больших размеров буфера.

Минусы реализации RingBufferDeque:

1. Импорт "deque" из "collections", для кого-то это может быть минусом) 

Решение task #2: C++ 

#include <iostream>
#include <vector>

class RingBufferVector {
private:
    size_t max;
    std::vector<int> data;

public:
    RingBufferVector(size_t size_max) : max(size_max) {}

    void append(int x) {
        data.push_back(x);
        if (data.size() > max) {
            data.erase(data.begin());
        }
    }

    std::vector<int> get() {
        return data;
    }
};

class RingBufferArray {
private:
    size_t max;
    int* data;
    size_t cur;

public:
    RingBufferArray(size_t size_max) : max(size_max), data(new int[size_max]), cur(0) {}

    void append(int x) {
        data[cur] = x;
        cur = (cur + 1) % max;
    }

    int* get() {
        return data;
    }

    ~RingBufferArray() {
        delete[] data;
    }
};

Плюсы реализации RingBufferVector: 

1. Использую "std::vector", это динамический массив с автоматической управляемой памятью. Сложность его O(n) 

2. Легкий в работе и пониманий.

Минусы реализации RingBufferVector:

1. Могут быть накладные расходы из-за динамического выделения и освобождения памяти. В реализации RingBufferArray я затрону эту тему.

Плюсы реализации RingBufferArray

1. Используется массив фиксированного размера, что дает большую производительность и мы избегаем динамического выделения памяти. 

Минусы реализации RingBufferArray:

1. Ручное управление памятью. 

2. Размер данных должен быть заранее известен.

Общий итог task # 2:

Python секция:

1. Реализация RingBufferDeque вероятней всего будет более производительной. 

С++ секция: 

1. Реализация RingBufferVector более удобная, но могут быть накладные расходы.

2. Реализация RingBufferArray требует ручное управление памятью.
Это позволит избежать накладных расходов на динамическое выделение памяти и даст лучшею производительность.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Вопрос №3

На языке Python предложить алгоритм, который быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел. 
Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным). 
Объяснить, почему вы считаете, что функция соответствует заданным критериям.

Решение task #3: Python

# Использование встроенной функции сортировки
def sort_array(arr):
    return sorted(arr)

# Использование метода списка
def sort_array_inplace(arr):
    arr.sort()

Python секция:

1. Использование algo Timsort в sorted и sort, Python это адаптивным и эффективным для различных сценариев.
Если на мы рассматриваем частично отсортированные данные. 

2. Timsort использует связку из двух MergeSort и InsertionSort, что обеспечивает эффективную работу на различных типах данных.

С++ секция: 

#include <algorithm>
#include <vector>

// Использование std::sort
std::vector<int> sort_array(const std::vector<int>& arr) {
    std::vector<int> result = arr;
    std::sort(result.begin(), result.end());
    return result;
}

// Использование std::sort 
void sort_array_inplace(std::vector<int>& arr) {,
    std::sort(arr.begin(), arr.end());
}

1. Использование algo Introsort  в std::sort стандартной библиотеке С++, в нем объединяется QuickSort, HeapSort и InsertionSort.

2. Introsort может быстро отсортировать массивы любого размера и его производительность на практике бывает лучше.

Общий итог: 

В выборе между "std::sort" и "sorted" зависит уже от контекста и удобства использования.